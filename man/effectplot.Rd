% Generated by roxygen2 (4.0.1): do not edit by hand
\name{effectplot}
\alias{effectplot}
\title{Plot for regressions to compare effects sizes of normalized changes in the explanatory variables}
\usage{
effectplot(reg, dat, vars = intersect(colnames(dat), names(coef(reg))),
  ignore.vars = NULL, numeric.effect = "10-90", dummy01 = TRUE,
  sort = TRUE, scale.depvar = NULL, depvar = names(reg$model)[[1]],
  xlab = "Explanatory variables\\n(low baseline high)",
  ylab = paste0("Effect on ", depvar, ""), colors = c(pos = "#11AAAA", neg =
  "#EE3355"), effect.sizes = NULL, effect.bases = NULL, horizontal = TRUE,
  show.ci = FALSE, ci.prob = c(0.05, 0.95), ...)
}
\arguments{
\item{reg}{the results from a regression, e.g. from a call to lm or glm}

\item{dat}{the data frame the regression was estimated from}

\item{vars}{the explanatory variables that shall be shown in the regression lplot}

\item{numeric.effect}{a code describing the lowest and highest values of numeric explanatory variables used to calculate the effect, e.g. "05-95" means taking the effect of moving from the 5 percent to the 95 percent quantile.}

\item{dummy01}{shall numeric varibles that have only 0 and 1 as values be treated as a dummy variables?}

\item{sort}{if TRUE (default) sort the effects by size}

\item{scale.depvar}{a scaling for the dependent variable}

\item{depvar}{name of the dependent variable}

\item{xlab,}{ylab labels}

\item{colors}{colors for positive values (pos) and negative values (neg)}

\item{horizontal}{shall bars be shown horizontally}

\item{show.ci}{shall confidence intervals be shown}

\item{ci.prob}{left and right probability level for confidence intervals}
}
\description{
The plot shall help to compare magnitudes of the influence of different explanatory variables. The default effect is "10-90", i.e. the effect of when -ceteris paribus- changing an (numeric) explanatory variable from its 10% quantile value to its 90% quantile. For dummy variables, we just consider the effect from changing it from 0 to 1.
}

\examples{\dontrun{
  # simulate some data
  set.seed(12345)
  n = 1000
  x = rnorm(n)
  z = rnorm(n)
  q = rnorm(n)
  
  # binary outcome
  y = ifelse(pnorm(1 + 0.5*x + 0.25*x^2 - 0.5*z + rnorm(n))>0.5, 1, 0)

  data = data.frame(y,x,z,q)
  # Logit regression
  reg = glm(y~x + x^2 + z +q, data=data, family="binomial")
  effectplot(reg,data,main="Effects", horizontal=TRUE, show.ci=TRUE)
  
  sdata = scale.data.cols(data,"10-90")
  sreg = glm(y~x + x^2 + z +q, data=sdata, family="binomial")
  summary(sreg)
  coefplot(sreg,sdata)

}}
